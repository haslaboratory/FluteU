package mboom.config

import chisel3._
import chisel3.util.BitPat

trait BasicInstructions {
  /** Logical Instructions **/
  val AND    = BitPat("b000000???????????????00000100100")
  val OR     = BitPat("b000000???????????????00000100101")
  val XOR    = BitPat("b000000???????????????00000100110")
  val NOR    = BitPat("b000000???????????????00000100111")
  val ANDI   = BitPat("b001100??????????????????????????")
  val ORI    = BitPat("b001101??????????????????????????")
  val XORI   = BitPat("b001110??????????????????????????")
  val LUI    = BitPat("b00111100000?????????????????????")
  /** Arithmetic Instructions **/
  val ADD    = BitPat("b000000???????????????00000100000")
  val ADDI   = BitPat("b001000??????????????????????????")
  val ADDU   = BitPat("b000000???????????????00000100001")
  val ADDIU  = BitPat("b001001??????????????????????????")
  val SUB    = BitPat("b000000???????????????00000100010")
  val SUBU   = BitPat("b000000???????????????00000100011")
  val SLT    = BitPat("b000000???????????????00000101010")
  val SLTI   = BitPat("b001010??????????????????????????")
  val SLTU   = BitPat("b000000???????????????00000101011")
  val SLTIU  = BitPat("b001011??????????????????????????")
  val MUL    = BitPat("b011100???????????????00000000010")
  val MULT   = BitPat("b000000??????????0000000000011000")
  val MULTU  = BitPat("b000000??????????0000000000011001")
  val DIV    = BitPat("b000000??????????0000000000011010")
  val DIVU   = BitPat("b000000??????????0000000000011011")
  val MADD   = BitPat("b011100??????????0000000000000000")
  val MADDU  = BitPat("b011100??????????0000000000000001")
  val MSUB   = BitPat("b011100??????????0000000000000100")
  val MSUBU  = BitPat("b011100??????????0000000000000101")
  val CLZ    = BitPat("b011100???????????????00000100000")
  val CLO    = BitPat("b011100???????????????00000100001")
  /** Branch and Jump Instructions **/
  val BEQ    = BitPat("b000100??????????????????????????")  // BEQ,B
  val BGEZ   = BitPat("b000001?????00001????????????????")
  val BGEZAL = BitPat("b000001?????10001????????????????")  // BGEZAL,BAL
  val BGTZ   = BitPat("b000111?????00000????????????????")
  val BLEZ   = BitPat("b000110?????00000????????????????")
  val BLTZ   = BitPat("b000001?????00000????????????????")
  val BLTZAL = BitPat("b000001?????10000????????????????")
  val BNE    = BitPat("b000101??????????????????????????")
  val J      = BitPat("b000010??????????????????????????")
  val JAL    = BitPat("b000011??????????????????????????")
  val JALR   = BitPat("b000000?????00000?????00000001001")
  val JR     = BitPat("b000000?????000000000000000001000")
  /** Load, Store, and Memory Control Instructions **/
  val LB     = BitPat("b100000??????????????????????????")
  val LBU    = BitPat("b100100??????????????????????????")
  val LH     = BitPat("b100001??????????????????????????")
  val LHU    = BitPat("b100101??????????????????????????")
  val LW     = BitPat("b100011??????????????????????????")
  val LL     = BitPat("b110000??????????????????????????")
  val SW     = BitPat("b101011??????????????????????????")
  val SH     = BitPat("b101001??????????????????????????")
  val SB     = BitPat("b101000??????????????????????????")
  val SC     = BitPat("b111000??????????????????????????")
  val LWL    = BitPat("b100010??????????????????????????")
  val LWR    = BitPat("b100110??????????????????????????")
  val SWL    = BitPat("b101010??????????????????????????")
  val SWR    = BitPat("b101110??????????????????????????")
  /** Move Instructions **/
  val MFC0   = BitPat("b01000000000??????????00000000???")
  val MTC0   = BitPat("b01000000100??????????00000000???")
  val MFHI   = BitPat("b0000000000000000?????00000010000")
  val MFLO   = BitPat("b0000000000000000?????00000010010")
  val MTHI   = BitPat("b000000?????000000000000000010001")
  val MTLO   = BitPat("b000000?????000000000000000010011")
  /** Shift Instructions **/
  val SLL    = BitPat("b00000000000???????????????000000")  // SLL,NOP
  val SLLV   = BitPat("b000000???????????????00000000100")
  val SRA    = BitPat("b00000000000???????????????000011")
  val SRAV   = BitPat("b000000???????????????00000000111")
  val SRL    = BitPat("b00000000000???????????????000010")
  val SRLV   = BitPat("b000000???????????????00000000110")
  /** Trap Instructions **/
  val TEQ    = BitPat("b000000????????????????????110100")
  val TEQI   = BitPat("b000001?????01100????????????????")
  val TGE    = BitPat("b000000????????????????????110000")
  val TGEI   = BitPat("b000000????????????????????110000")
  val TGEIU  = BitPat("b000001?????01001????????????????")
  val TGEU   = BitPat("b000000????????????????????110001")
  val TLT    = BitPat("b000000????????????????????110010")
  val TLTI   = BitPat("b000001?????01010????????????????")
  val TLTIU  = BitPat("b000001?????01011????????????????")
  val TLTU   = BitPat("b000000????????????????????110011")
  val TNE    = BitPat("b000000????????????????????110110")
  val TNEI   = BitPat("b000001?????01110????????????????")
  /** Syscall, currently Halt **/
  val SYSCALL = BitPat("b000000????????????????????001100")
  val BREAK   = BitPat("b000000????????????????????001101")
  val ERET    = BitPat("b01000010000000000000000000011000")
  val SYNC    = BitPat("b000000000000000000000?????001111")
  /** TLB Instructions */
  val TLBP    = BitPat("b01000010000000000000000000001000")
  val TLBR    = BitPat("b01000010000000000000000000000001")
  val TLBWI   = BitPat("b01000010000000000000000000000010")
  val TLBWR   = BitPat("b01000010000000000000000000000110")

  // condition execute instructions
  val MOVN    = BitPat("b000000???????????????00000001011")
  val MOVZ    = BitPat("b000000???????????????00000001010")

  /** Cache Instruction */
  val CACHEI  = BitPat("b101111?????????0????????????????")
  val CACHED  = BitPat("b101111?????????1????????????????")

  val PREF    = BitPat("b110011??????????????????????????")

  /** Likely Instruction */
  val BEQL    = BitPat("b010100??????????????????????????")

  val WAIT    = BitPat("b0100001???????????????????100000")

}
object Instructions extends BasicInstructions